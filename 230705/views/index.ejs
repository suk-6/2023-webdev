<!DOCTYPE html>
<html>
	<head>
		<title>Drive API Quickstart</title>
		<meta charset="utf-8" />
	</head>
	<body>
		<p>Drive API Quickstart</p>

		<!--Add buttons to initiate auth sequence and sign out-->
		<button id="authorize_button" onclick="handleAuthClick()">
			Authorize
		</button>
		<button id="signout_button" onclick="handleSignoutClick()">
			Sign Out
		</button>

		<div id="copyDiv" style="margin-top: 20px">
			<input
				type="text"
				id="newFileName"
				placeholder="새로운 파일명을 입력하세요."
			/>
			<br />
			<button
				id="create_button"
				type="submit"
				onclick="handleCreateClick()"
			>
				Create a new file with an example
			</button>
		</div>

		<pre id="content" style="white-space: pre-wrap"></pre>

		<script type="text/javascript">
			/* exported gapiLoaded */
			/* exported gisLoaded */
			/* exported handleAuthClick */
			/* exported handleSignoutClick */

			// TODO(developer): Set to client ID and API key from the Developer Console
			const API_KEY = "<%= apiKey %>";
			const CLIENT_ID = "<%= clientId %>";

			// Discovery doc URL for APIs used by the quickstart
			const DISCOVERY_DOC = [
				"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest",
				"https://sheets.googleapis.com/$discovery/rest?version=v4",
			];

			// Authorization scopes required by the API; multiple scopes can be
			// included, separated by spaces.
			const SCOPES = [
				"https://www.googleapis.com/auth/drive",
				"https://www.googleapis.com/auth/spreadsheets",
				"https://www.googleapis.com/auth/drive.metadata.readonly",
			];

			let tokenClient;
			let gapiInited = false;
			let gisInited = false;

			document.getElementById("authorize_button").style.visibility =
				"hidden";
			document.getElementById("signout_button").style.visibility =
				"hidden";
			document.getElementById("copyDiv").style.visibility = "hidden";

			/**
			 * Callback after api.js is loaded.
			 */
			function gapiLoaded() {
				gapi.load("client", initializeGapiClient);
			}

			/**
			 * Callback after the API client is loaded. Loads the
			 * discovery doc to initialize the API.
			 */
			async function initializeGapiClient() {
				await gapi.client.init({
					apiKey: API_KEY,
					discoveryDocs: DISCOVERY_DOC,
				});
				gapiInited = true;
				maybeEnableButtons();
			}

			/**
			 * Callback after Google Identity Services are loaded.
			 */
			function gisLoaded() {
				tokenClient = google.accounts.oauth2.initTokenClient({
					client_id: CLIENT_ID,
					scope: SCOPES.join(" "),
					callback: "", // defined later
				});
				gisInited = true;
				maybeEnableButtons();
			}

			/**
			 * Enables user interaction after all libraries are loaded.
			 */
			function maybeEnableButtons() {
				if (gapiInited && gisInited) {
					document.getElementById(
						"authorize_button"
					).style.visibility = "visible";
				}
			}

			/**
			 *  Sign in the user upon button click.
			 */
			function handleAuthClick() {
				tokenClient.callback = async (resp) => {
					if (resp.error !== undefined) {
						throw resp;
					}
					document.getElementById("signout_button").style.visibility =
						"visible";
					document.getElementById("copyDiv").style.visibility =
						"visible";
					document.getElementById("authorize_button").innerText =
						"Refresh";
					await listFiles();
				};

				if (gapi.client.getToken() === null) {
					// Prompt the user to select a Google Account and ask for consent to share their data
					// when establishing a new session.
					tokenClient.requestAccessToken({ prompt: "consent" });
				} else {
					// Skip display of account chooser and consent dialog for an existing session.
					tokenClient.requestAccessToken({ prompt: "" });
				}
			}

			/**
			 *  Sign out the user upon button click.
			 */
			function handleSignoutClick() {
				const token = gapi.client.getToken();
				if (token !== null) {
					google.accounts.oauth2.revoke(token.access_token);
					gapi.client.setToken("");
					document.getElementById("content").innerText = "";
					document.getElementById("authorize_button").innerText =
						"Authorize";
					document.getElementById("signout_button").style.visibility =
						"hidden";
					document.getElementById("copyDiv").style.visibility =
						"hidden";
				}
			}

			/**
			 * Print metadata for first 10 files.
			 */
			async function listFiles() {
				let response;
				try {
					response = await gapi.client.drive.files.list({
						pageSize: 10,
						fields: "files(id, name)",
					});
				} catch (err) {
					document.getElementById("content").innerText = err.message;
					return;
				}
				const files = response.result.files;
				if (!files || files.length == 0) {
					document.getElementById("content").innerText =
						"No files found.";
					return;
				}
				// Flatten to string to display
				const output = files.reduce(
					(str, file) => `${str}${file.name} (${file.id})\n`,
					"Files:\n"
				);
				document.getElementById("content").innerText = output;
			}
		</script>
		<script
			async
			defer
			src="https://apis.google.com/js/api.js"
			onload="gapiLoaded()"
		></script>
		<script
			async
			defer
			src="https://accounts.google.com/gsi/client"
			onload="gisLoaded()"
		></script>
		<script>
			const popupCheck = () => {
				let popupWindow = window.open("about:blank", "_blank");

				if (popupWindow === null) {
					alert(
						"팝업이 차단되어 있습니다.\n이용 전 해제 부탁드립니다."
					);
				} else {
					popupWindow.close();
				}
			};

			const handleCreateClick = () => {
				const copyTitle = newFileName.value;

				if (copyTitle === "") {
					alert("파일명을 입력하세요.");
					return;
				}

				copyFile("<%= originId %>", copyTitle);
			};

			const copyFile = (originID, copyTitle) => {
				alert(`원본 양식 -> ${copyTitle}`);

				let body = {
					title: copyTitle,
					name: copyTitle,
				};

				let request = gapi.client.drive.files.copy({
					fileId: originID,
					resource: body,
				});

				request.execute((resp) => {
					const range = "시트1!A1"; // 업데이트할 셀 범위
					const newValue = copyTitle; // 업데이트할 셀의 새 값

					// Sheets API를 사용하여 셀 업데이트
					gapi.client.sheets.spreadsheets.values
						.update({
							spreadsheetId: resp.id,
							range: range,
							valueInputOption: "USER_ENTERED",
							resource: {
								values: [[newValue]],
							},
						})
						.then(
							(response) => {
								console.log("셀이 업데이트되었습니다.");
							},
							(error) => {
								console.error(
									"셀 업데이트 중 오류가 발생했습니다.",
									error.result.error.message
								);
							}
						);

					if (
						window.confirm(
							`파일을 새 창에서 확인하시겠습니까?\n\n새 파일 아이디: ${resp.id}\n새 파일 이름: ${resp.name}`
						)
					) {
						window.open(
							`https://docs.google.com/spreadsheets/d/${resp.id}/edit`,
							"_blank"
						);
					}
				});
			};

			popupCheck();
		</script>
	</body>
</html>
